const router = require("express").Router();
require("dotenv").config();


// IMPORT FUNCTIONS
const { convertISODATE, createSQLConnection, convertBooleanToString, convertCPF } = require('./functions.js');


// CREATE
router.post("/novo-pagamento", async (req, res) => {
  const con = createSQLConnection();

  con.connect((error) => {
    if (error) {
      res.render("pages/pagamentos/listar-pagamentos", { error_msg: `Ocorreu um erro: ${error}` });
    } else {
      const createNewDate = convertISODATE();

      con.query(`SELECT USUARIOS.id, USUARIOS.nome, PARCELAMENTOS.qtd_parcelas, COUNT(*) as qtd_parcelas_pagas FROM USUARIOS, PARCELAMENTOS, PAGAMENTOS WHERE USUARIOS.id = PARCELAMENTOS.id_usuario AND PAGAMENTOS.id_parcelamento = PARCELAMENTOS.id AND PARCELAMENTOS.id_usuario = ${req.body.id} GROUP BY PAGAMENTOS.id_parcelamento ORDER BY USUARIOS.nome;`, (error, result) => {

        if (error) {
          con.end();
          req.flash("error_msg", "Ocorreu um erro: " + error);
          res.redirect(301, req.get("referer"));
        } else {
          const usuario = result[0];

          if (++usuario.qtd_parcelas_pagas > usuario.qtd_parcelas) {
            con.end();
            req.flash("error_msg", "Não foi possível registrar o pagamento, limite máximo de parcelas atingido");
            res.redirect(301, req.get("referer"));
          } else {
            con.query(`INSERT INTO PAGAMENTOS VALUES (DEFAULT, ${req.body.id_parcelamento}, DEFAULT, '${createNewDate}')`, (error, result) => {
              if (error) {
                con.end();
                req.flash("error_msg", "Ocorreu um erro: " + error);
                res.redirect(301, req.get("referer"));
              } else {
                con.end();
                req.flash("success_msg", "Novo pagamento realizado para " + req.body.nome);
                res.redirect(301, req.get("referer"));
              };
            });
          };
        };
      });
    };
  });
});

// READ ONE INSTALLMENT
router.get("/novo-pagamento/:id", async (req, res) => { });

// DELETE INSTALLMENT
router.delete("/", async (req, res) => { })



export default router;